generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum NotificationType {
  FRIEND_REQUEST
  FRIEND_REQUEST_ACCEPTED
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  nickname     String
  language     String
  statusMessage String? @db.VarChar(100)
  profileImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  chatRooms             ChatRoomUser[]
  messages              Message[]
  sentNotifications     Notification[] @relation("SentNotifications")
  receivedNotifications Notification[] @relation("ReceivedNotifications")
  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
  friends       Friend[] @relation("UserFriends")
  friendOf      Friend[] @relation("FriendUsers")

  @@index([createdAt], name: "user_createdAt_idx")
}

model FriendRequest {
  id          String            @id @default(uuid())
  senderId    String
  receiverId  String
  status      FriendRequestStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  sender    User @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver  User @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

model Friend {
  id          String   @id @default(uuid())
  userId      String
  friendId    String
  createdAt   DateTime @default(now())

  user    User @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend  User @relation("FriendUsers", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
}

model ChatRoom {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users        ChatRoomUser[]
  messages     Message[]
}

model ChatRoomUser {
  id         String   @id @default(uuid())
  userId     String
  chatRoomId String
  joinedAt   DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  @@unique([userId, chatRoomId])
}

model Message {
  id         String   @id @default(uuid())
  content    String
  userId     String
  chatRoomId String
  language   String
  createdAt  DateTime @default(now())

  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatRoom     ChatRoom             @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  translations MessageTranslation[]

  @@index([chatRoomId, createdAt], name: "message_room_created_idx")
}

model MessageTranslation {
  id         String   @id @default(uuid())
  messageId  String
  language   String
  content    String
  createdAt  DateTime @default(now())

  message  Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, language])
}

model Notification {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  type       NotificationType
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  sender   User @relation("SentNotifications", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedNotifications", fields: [receiverId], references: [id], onDelete: Cascade)
}
